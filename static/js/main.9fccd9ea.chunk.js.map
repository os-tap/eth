{"version":3,"sources":["helpers/keygen.js","helpers/constants.js","helpers/contract.js","helpers/utils.js","App.js","reportWebVitals.js","index.js"],"names":["Keygen","Uint8Array","this","window","CryptoKey","a","counter","crypto","subtle","generateKey","name","length","key_buf","importKey","exportKey","message","encrypt","TextEncoder","encode","ciphertext","decrypt","decrypted","TextDecoder","decode","ABI","Contract","provider","Web3","eth","account","request","method","accounts","data","console","log","methods","store","send","from","call","buf2hex","buffer","map","x","toString","padStart","join","hex2buf","hex","match","h","parseInt","serialize_form","from_data","Object","values","fromEntries","serialize_forms","forms","forEach","form","deserialize_form","str","split","deserialize_forms","Pass","pass","index","removePass","makeVisible","makeEditable","React","useState","copyTooltip","setCopyTooltip","e","navigator","clipboard","writeText","Form","Group","className","Label","Control","disabled","edit","readOnly","defaultValue","site","type","onChange","target","value","login","visible","ButtonGroup","OverlayTrigger","placement","onExited","overlay","Tooltip","Button","onClick","FormKey","keygen","fetch_blockckain","setValue","changed","setCHange","v","localStorage","getItem","import","utils","res","useEffect","import_key_from_storage","onSubmit","preventDefault","nativeEvent","submitter","confirm","generate","export","hex_key","setItem","alert","placeholder","variant","LoadingButton","props","isLoading","setLoading","handleClick","title","FormAction","addPass","save_blockckain","contract","ethereum","App","passes","setPasses","view","setView","init_metamask","chainId","undefined","init","on","set_account","sep1","sep2","serialize","p","is_valid","newPasses","s","encryptMessage","crypted","save","fetch","decryptMessage","open","fields","ps","ob","f","i","_","splice","no_metamask","activate_metamask","testnet","loader","style","minHeight","role","width","height","main_form","Card","Body","rdr","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+7BAAaA,EAAb,qJACqB,IAAIC,WAAW,MADpC,4CAGI,WACI,OAAQ,YAAAC,KAAA,gBAAqBC,OAAOC,YAJ5C,6DAOI,4BAAAC,EAAA,6DACQC,EADR,YACkBJ,KADlB,eAEsBC,OAAOI,OAAOC,OAAOC,YACnC,CACIC,KAAM,UACNJ,UACAK,OAAQ,MAEZ,EACA,CAAC,UAAW,YATpB,mBAEIT,KAFJ,6DAPJ,iHAqBI,WAAaU,GAAb,SAAAP,EAAA,+EAE0BF,OAAOI,OAAOC,OAAOK,UACnC,MACAD,EACA,WACA,EACA,CAAC,UAAW,YAPxB,mBAEQV,KAFR,sFAUe,GAVf,iCAYW,GAZX,yDArBJ,kHAoCI,sBAAAG,EAAA,sEACiBE,OAAOC,OAAOM,UAAU,MAAxB,YAA+BZ,KAA/B,OADjB,wFApCJ,yHAwCI,WAAqBa,GAArB,eAAAV,EAAA,6DACQC,EADR,YACkBJ,KADlB,eAEiBC,OAAOI,OAAOC,OAAOQ,QAC9B,CACIN,KAAM,UACNJ,UACAK,OAAQ,IAJH,YAMTT,KANS,OAOT,IAAIe,aAAcC,OAAOH,IATjC,wFAxCJ,0HAoDI,WAAqBI,GAArB,iBAAAd,EAAA,6DACQC,EADR,YACkBJ,KADlB,eAE0BC,OAAOI,OAAOC,OAAOY,QACvC,CACIV,KAAM,UACNJ,UACAK,OAAQ,IAJM,YAMlBT,KANkB,MAOlBiB,GATR,cAEQE,EAFR,0BAWW,IAAIC,aAAcC,OAAOF,IAXpC,gDApDJ,8DCCaG,EAAM,CAClB,CACC,OAAU,CACT,CACC,aAAgB,UAChB,KAAQ,GACR,KAAQ,YAGV,KAAQ,OACR,QAAW,CACV,CACC,aAAgB,QAChB,KAAQ,GACR,KAAQ,UAGV,gBAAmB,OACnB,KAAQ,YAET,CACC,OAAU,GACV,KAAQ,OACR,QAAW,CACV,CACC,aAAgB,UAChB,KAAQ,GACR,KAAQ,YAGV,gBAAmB,OACnB,KAAQ,YAET,CACC,OAAU,CACT,CACC,aAAgB,UAChB,KAAQ,MACR,KAAQ,YAGV,KAAQ,OACR,QAAW,GACX,gBAAmB,aACnB,KAAQ,YAET,CACC,OAAU,CACT,CACC,aAAgB,QAChB,KAAQ,QACR,KAAQ,UAGV,KAAQ,QACR,QAAW,GACX,gBAAmB,aACnB,KAAQ,a,qHCvDGC,EAAb,WAEI,WAAYC,GAAW,wPACnB,YAAAxB,KAAA,MAAiBwB,EACjB,YAAAxB,KAAA,MAAa,IAAIyB,IAAJ,YAASzB,KAAT,OACb,YAAAA,KAAA,MAAiB,IAAI,YAAAA,KAAA,MAAW0B,IAAf,UAA4BJ,EDR9B,8CCGvB,kDAOI,WACI,MAAkC,qBAA1B,YAAOtB,KAAP,QARhB,yBAUI,SAAY2B,GACR,YAAA3B,KAAA,MAAgB2B,IAXxB,kEAaI,4BAAAxB,EAAA,sEAC2B,YAAAH,KAAA,MAAe4B,QAAQ,CAAEC,OAAQ,wBAD5D,cACUC,EADV,QAEiBrB,SAAQ,YAAAT,KAAA,MAAgB8B,EAAS,IAFlD,kBAGWA,EAASrB,OAAS,GAH7B,gDAbJ,+GAkBI,WAAWsB,GAAX,SAAA5B,EAAA,6DACI6B,QAAQC,IAAR,YAAYjC,KAAZ,OADJ,SAEiB,YAAAA,KAAA,MAAekC,QAAQC,MAAMJ,GAAMK,KAAK,CAACC,KAAK,YAACrC,KAAF,QAF9D,wFAlBJ,iHAsBI,sBAAAG,EAAA,sEACiB,YAAAH,KAAA,MAAekC,QAAQH,KAAvB,YAA4B/B,KAA5B,OAA2CsC,OAD5D,wFAtBJ,6DCHO,SAASC,EAAQC,GACpB,MAAO,KAAO,YAAI,IAAIzC,WAAWyC,IAC5BC,KAAI,SAAAC,GAAC,OAAIA,EAAEC,SAAS,IAAIC,SAAS,EAAG,QACpCC,KAAK,IAEP,SAASC,EAAQC,GACpB,OAAO,IAAIhD,WAAWgD,EAAIC,MAAM,gBAAgBP,KAAI,SAAAQ,GAAC,OAAIC,SAASD,EAAG,QAAMT,OAExE,SAASW,EAAeC,GAC3B,OAAOC,OAAOC,OAAOD,OAAOE,YAAYH,IAAYP,KAAK,KAEtD,SAASW,EAAgBC,GAC5B,OAAOA,EAAMC,SAAQ,SAAAC,GAAI,OAAIR,EAAeQ,MAAOd,KAAK,KAErD,SAASe,EAAiBC,GAC7B,OAAOA,EAAIC,MAAM,KAEd,SAASC,EAAkBF,GAC9B,OAAOA,EAAIC,MAAM,KAAKJ,QAAQE,G,WCRlC,SAASI,EAAT,GAAuE,IAAvDC,EAAsD,EAAtDA,KAAMC,EAAgD,EAAhDA,MAAOC,EAAyC,EAAzCA,WAAYC,EAA6B,EAA7BA,YAAaC,EAAgB,EAAhBA,aAAgB,EAC9BC,IAAMC,SAAS,QADe,mBAC7DC,EAD6D,KAChDC,EADgD,iDAEpE,WAAwBC,GAAxB,SAAAvE,EAAA,sEACQwE,UAAUC,UAAUC,UAAUZ,EAAKA,MAD3C,OAEEQ,EAAe,WAFjB,4CAFoE,sBAMpE,OACE,cAACK,EAAA,EAAD,UACE,cAACA,EAAA,EAAKC,MAAN,UACE,sBAAKC,UAAU,sBAAf,UACE,sBAAKA,UAAU,MAAf,UACY,GAATd,GAAc,cAACY,EAAA,EAAKG,MAAN,mBACf,cAACH,EAAA,EAAKI,QAAN,CAAcC,SAAUlB,EAAKmB,KAAMC,SAAUpB,EAAKmB,KAAME,aAAcrB,EAAKsB,KAAMC,KAAK,OAAOR,UAAU,+BAA+BS,SAAU,SAAAf,GAAC,OAAIT,EAAKsB,KAAOb,EAAEgB,OAAOC,YAE5K,sBAAKX,UAAU,MAAf,UACY,GAATd,GAAc,cAACY,EAAA,EAAKG,MAAN,oBACf,cAACH,EAAA,EAAKI,QAAN,CAAcC,SAAUlB,EAAKmB,KAAMC,SAAUpB,EAAKmB,KAAME,aAAcrB,EAAK2B,MAAOJ,KAAK,OAAOR,UAAU,+BAA+BS,SAAU,SAAAf,GAAC,OAAIT,EAAK2B,MAAQlB,EAAEgB,OAAOC,YAE9K,sBAAKX,UAAU,MAAf,UACY,GAATd,GAAc,cAACY,EAAA,EAAKG,MAAN,mBACf,cAACH,EAAA,EAAKI,QAAN,CAAcC,SAAUlB,EAAKmB,KAAMC,SAAUpB,EAAKmB,KAAME,aAAcrB,EAAKA,KAAMuB,KAAMvB,EAAK4B,QAAU,OAAS,WAAYb,UAAU,+BAA+BS,SAAU,SAAAf,GAAC,OAAIT,EAAKA,KAAOS,EAAEgB,OAAOC,YAE1M,qBAAKX,UAAU,oBAAf,SACE,eAACc,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CACEC,UAAU,SACVC,SAAU,kBAAMxB,EAAe,SAC/ByB,QACE,cAACC,EAAA,EAAD,UACG3B,IALP,SAQE,cAAC4B,EAAA,EAAD,CAAQC,QAhC8C,4CAgCtD,4BAEF,cAACN,EAAA,EAAD,CACEC,UAAU,SACVE,QACE,cAACC,EAAA,EAAD,mBAHJ,SAOE,cAACC,EAAA,EAAD,CAAQC,QAAS,kBAAMjC,EAAYF,IAAnC,4BAEF,cAAC6B,EAAA,EAAD,CACEC,UAAU,SACVE,QACE,cAACC,EAAA,EAAD,mBAHJ,SAOE,cAACC,EAAA,EAAD,CAAQC,QAAS,kBAAMhC,EAAaH,IAApC,sBAEF,cAAC6B,EAAA,EAAD,CACEC,UAAU,SACVE,QACE,cAACC,EAAA,EAAD,qBAHJ,SAOE,cAACC,EAAA,EAAD,CAAQC,QAAS,kBAAMlC,EAAWD,IAAlC,kCAWhB,SAASoC,EAAT,GAAgD,IAA7BC,EAA4B,EAA5BA,OAAQC,EAAoB,EAApBA,iBAAoB,EACnBlC,IAAMC,SAAS,IADI,mBACtCoB,EADsC,KAC/Bc,EAD+B,OAEhBnC,IAAMC,UAAS,GAFC,mBAEtCmC,EAFsC,KAE7BC,EAF6B,iDAI7C,8BAAAxG,EAAA,yDACQyG,EAAI3G,OAAO4G,aAAaC,QAAQ,MADxC,iEAGkBP,EAAOQ,OAAOC,EAAcJ,IAH9C,YAGMK,EAHN,gCAKIR,EAASG,GACT5E,QAAQC,IAAI,aANhB,UAOUuE,IAPV,iCASSS,GATT,6CAJ6C,sBAgB7C3C,IAAM4C,WAAU,WACdlF,QAAQC,IAAI,kBAjB+B,mCAkB3CkF,KACC,IAIH,IAKMC,EAAQ,uCAAG,WAAM1C,GAAN,iBAAAvE,EAAA,yDACfuE,EAAE2C,iBAGU,iBAFN7G,EAAOkE,EAAE4C,YAAYC,UAAU/G,MAFtB,oBAKRmF,IAAS1F,OAAOuH,QAAQ,0GALhB,iCAMLjB,EAAOkB,WANF,mBAOGT,EAPH,SAOuBT,EAAOmB,SAP9B,mBAOPC,EAPO,KAOSpF,QAPT,gBAQXkE,EAASkB,GACThB,GAAU,GACV1G,OAAO4G,aAAae,QAAQ,KAAMD,GAVvB,mCAaE,cAARnH,EAbM,oBAcRmF,EAdQ,iBAeX1F,OAAO4H,MAAM,gCAfF,yCAkBKtB,EAAOQ,OAAOC,EAAcrB,IAlBjC,eAoBN1F,OAAO4G,aAAae,QAAQ,KAAMjC,GAD7B1F,OAAO4H,MAAM,qBAEvBlB,GAAU,GArBC,4CAAH,sDA0Bd,OACE,eAAC7B,EAAA,EAAD,CAAMsC,SAAUA,EAAhB,UACE,eAACtC,EAAA,EAAKC,MAAN,WACE,cAACD,EAAA,EAAKG,MAAN,UAAY,0CACZ,cAACH,EAAA,EAAKI,QAAN,CAAc1E,KAAK,MAAMgF,KAAK,OAAOR,UAAU,QAAQW,MAAOA,EAAOF,SAnC1D,SAAAf,GACf+B,EAAS/B,EAAEgB,OAAOC,OAClBgB,GAAU,IAiCmFmB,YAAY,sCAEvG,uBACA,sBAAK9C,UAAU,gCAAf,UACE,cAACoB,EAAA,EAAD,CAAQ5F,KAAK,eAAeuH,QAAQ,eAAevC,KAAK,SAAxD,0BADF,OAIE,cAACY,EAAA,EAAD,CAAQjB,aAAcQ,EAAQe,GAAUlG,KAAK,aAAauH,QAAQ,eAAevC,KAAK,SAAtF,8BAQR,SAASwC,EAAcC,GAAQ,IAAD,EACI3D,IAAMC,UAAS,GADnB,mBACrB2D,EADqB,KACVC,EADU,KAGtBC,EAAW,uCAAG,WAAM1D,GAAN,SAAAvE,EAAA,6DAClBgI,GAAW,GADO,SAEZF,EAAM5B,UAFM,OAGlB8B,GAAW,GAHO,2CAAH,sDAMjB,OACE,cAAC/B,EAAA,EAAD,CACE2B,QAAQ,eACR5C,SAAU+C,EACV7B,QAAU6B,EAA0B,KAAdE,EAHxB,SAKGF,EAAY,gBAAaD,EAAMI,QAKtC,SAASC,EAAT,GAAqE,IAA/CC,EAA8C,EAA9CA,QAAS/B,EAAqC,EAArCA,iBAAkBgC,EAAmB,EAAnBA,gBAC/C,OACE,eAAC1D,EAAA,EAAD,WACE,cAACsB,EAAA,EAAD,CAAQ5F,KAAK,MAAMuH,QAAQ,eAAe1B,QAASkC,EAAnD,sBADF,OAIE,cAACP,EAAD,CAAexH,KAAK,OAAOuH,QAAQ,eAAe1B,QAASmC,EAAiBH,MAAM,uBAJpF,OAME,cAACL,EAAD,CAAeK,MAAM,mBAAmB7H,KAAK,QAAQuH,QAAQ,eAAe1B,QAASG,OAK3F,IAAMD,EAAS,IAAIzG,EACb2I,EAAW,IAAIlH,EAAStB,OAAOyI,UAgMtBC,MA9Lf,WAAgB,IAAD,EACerE,IAAMC,SAAS,IAD9B,mBACNqE,EADM,KACEC,EADF,OAEWvE,IAAMC,SAAS,UAF1B,mBAENuE,EAFM,KAEAC,EAFA,iDAIb,sBAAA5I,EAAA,sEACmBsI,EAASO,gBAD5B,cAGsC,GAA3B/I,OAAOyI,SAASO,QAAcF,EAAQ,WAC1CA,EAAQ,MAFJA,EAAQ,YAFnB,4CAJa,sBAWbzE,IAAM4C,WAAU,gBAEUgC,IAApBjJ,OAAOyI,SAETK,EAAQ,iBAfC,mCAkBTI,GAOAlJ,OAAOyI,SAASU,GAAG,mBAAmB,SAAAtH,GAGhCA,EAASrB,OAAS,GACpBsI,EAAQ,MACRN,EAASY,YAAYvH,EAAS,IAC9B0E,KAEGuC,EAAQ,eAEf9I,OAAOyI,SAASU,GAAG,gBAAgB,SAAAH,GAEfF,EAAH,GAAXE,EAAsB,KACb,iBAGhB,CAACR,IAIJ,IAAMa,EAAO,MACPC,EAAO,MACPC,EAAY,SAAAC,GAAC,OAAIA,EAAElE,KAAO+D,EAAOG,EAAE7D,MAAQ0D,EAAOG,EAAExF,MA/C7C,SAiDEuE,IAjDF,2EAiDb,gCAAArI,EAAA,yDACOoG,EAAOmD,WADd,wDAGQC,EAHR,YAGwBf,IACZnG,KAAI,SAAAgH,GAAC,OAAIA,EAAErE,MAAO,KAC5ByD,EAAUc,GAENC,EAAIhB,EAAOnG,IAAI+G,GAAW3G,KAAK0G,GAPrC,SAQsBhD,EAAOsD,eAAeD,GAR5C,cAQME,EARN,iBASkBrB,EAASsB,KAAK/C,EAAc8C,IAT9C,4DAjDa,+BA6DEtD,IA7DF,2EA6Db,kCAAArG,EAAA,yDACOoG,EAAOmD,WADd,wDAEEb,EAAU,IAFZ,SAGmBJ,EAASuB,QAH5B,UAGMjI,EAHN,gDAIoB8F,MAAM,8BAJ1B,wBAMmBtB,EAAO0D,eAAejD,EAAcjF,IANvD,QAMMmI,EANN,OAQQC,EAAS,CAAC,OAAQ,QAAS,QAC3BR,EAAYO,EAAKpG,MAAMyF,GAAM9G,KAAI,SAAA2H,GACrC,IAAIC,EAAK,CAAEjF,MAAM,EAAMS,SAAS,GAEhC,OADAuE,EAAGtG,MAAMwF,GAAM5F,SAAQ,SAAC4G,EAAGC,GAAJ,OAAUF,EAAGF,EAAOI,IAAMD,KAC1CD,KAGTxB,EAAUc,GAfZ,6CA7Da,kEA+Eb,sBAAAxJ,EAAA,yDACOoG,EAAOmD,WADd,gBAC0B7B,MAAM,kGADhC,sCAEarB,IAFb,4CA/Ea,kEAoFb,sBAAArG,EAAA,yDACOoG,EAAOmD,WADd,gBAC0B7B,MAAM,kGADhC,sCAEaW,IAFb,4CApFa,sBAyFb,IAAMD,EAAU,SAAAiC,GACd,IAAMb,EAAS,sBAAOf,GAAP,CAAe,KAC9BC,EAAUc,IAGNxF,EAAa,SAAAD,GACjB,IAAMyF,EAAS,YAAOf,GACtBe,EAAUc,OAAOvG,EAAO,GACxB2E,EAAUc,IAGNvF,EAAc,SAAAF,GAClB,IAAMyF,EAAS,YAAOf,GACtBe,EAAUzF,GAAO2B,SAAW8D,EAAUzF,GAAO2B,QAC7CgD,EAAUc,IAGNtF,EAAe,SAAAH,GACnB,IAAMyF,EAAS,YAAOf,GACtBe,EAAUzF,GAAOkB,MAAQuE,EAAUzF,GAAOkB,KAC1CyD,EAAUc,IAGNe,EACJ,oBAAI1F,UAAU,mBAAd,6CAGI2F,EACJ,cAAC7F,EAAA,EAAD,UACE,oBAAIE,UAAU,mBAAd,gDAOE4F,EACJ,oBAAI5F,UAAU,mBAAd,yCAUI6F,EACJ,qBAAK7F,UAAU,mDAAmD8F,MAJjD,CACjBC,UAAW,QAGX,SACE,qBAAK/F,UAAU,4BAA4BgG,KAAK,SAASF,MATrC,CACtBG,MAAO,OACPC,OAAQ,YAYJC,EACJ,gCACE,oBAAInG,UAAU,mBAAd,8BACA,cAACsB,EAAD,CAASiC,QAASA,EAAShC,OAAQA,EAAQC,iBAAkBA,IAC7D,qBAAKxB,UAAU,YAAf,SAGG4D,EAAOnG,KAAI,SAACwB,EAAMC,GAAP,OACV,cAACkH,EAAA,EAAD,CAAMpG,UAAU,OAAhB,SACE,cAACoG,EAAA,EAAKC,KAAN,UACE,cAACrH,EAAD,CAEEE,MAAOA,EACPD,KAAMA,EACNE,WAAYA,EACZC,YAAaA,EACbC,aAAcA,GALTH,YAWf,uBACA,cAACoE,EAAD,CAAYC,QAASA,EAAShC,OAAQA,EAAQC,iBAtKrC,2CAsK6EgC,gBAtK7E,gDA0KT8C,EAAMH,EACV,OAAQrC,GACN,IAAK,cAAewC,EAAMZ,EAAa,MACvC,IAAK,WAAYY,EAAMX,EAAmB,MAC1C,IAAK,UAAWW,EAAMV,EAAS,MAC/B,IAAK,KAAMU,EAAMH,EAAW,MAC5B,IAAK,SAAUG,EAAMT,EAIvB,OACE,qBAAK7F,UAAU,MAAf,SACE,sBAAKA,UAAU,YAAf,UACE,uBACCsG,QCzWMC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCCdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.9fccd9ea.chunk.js","sourcesContent":["export class Keygen {\r\n    #key; #counter = new Uint8Array(16)\r\n\r\n    is_valid() {\r\n        return (this.#key instanceof window.CryptoKey)\r\n    }\r\n    \r\n    async generate() {\r\n        let counter = this.#counter\r\n        this.#key = await window.crypto.subtle.generateKey(\r\n            {\r\n                name: \"AES-CTR\",\r\n                counter,\r\n                length: 256\r\n            },\r\n            true,\r\n            [\"encrypt\", \"decrypt\"]\r\n        )\r\n\r\n    }\r\n\r\n    async import(key_buf) {\r\n        try {\r\n            this.#key = await window.crypto.subtle.importKey(\r\n                \"raw\",\r\n                key_buf,\r\n                \"AES-CTR\",\r\n                true,\r\n                [\"encrypt\", \"decrypt\"]\r\n            )\r\n        } catch (err) {\r\n            return false\r\n        }\r\n        return true\r\n    }\r\n\r\n    async export() {\r\n        return await crypto.subtle.exportKey(\"raw\", this.#key)\r\n    }\r\n\r\n    async encryptMessage(message) {\r\n        let counter = this.#counter\r\n        return await window.crypto.subtle.encrypt(\r\n            {\r\n                name: \"AES-CTR\",\r\n                counter,\r\n                length: 64\r\n            },\r\n            this.#key,\r\n            new TextEncoder().encode(message)\r\n        )\r\n    }\r\n    async decryptMessage(ciphertext) {\r\n        let counter = this.#counter\r\n        let decrypted = await window.crypto.subtle.decrypt(\r\n            {\r\n                name: \"AES-CTR\",\r\n                counter,\r\n                length: 64\r\n            },\r\n            this.#key,\r\n            ciphertext\r\n        )\r\n        return new TextDecoder().decode(decrypted);\r\n    }\r\n\r\n}","export const ADDRESS = \"0xC9b4c2Ce6cFa2cda9ff8b6Acd771018Fde84d8cA\";\r\nexport const ABI = [\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"data\",\r\n\t\t\"outputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"bytes\",\r\n\t\t\t\t\"name\": \"\",\r\n\t\t\t\t\"type\": \"bytes\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"stateMutability\": \"view\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [],\r\n\t\t\"name\": \"gets\",\r\n\t\t\"outputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"stateMutability\": \"view\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"val\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"sets\",\r\n\t\t\"outputs\": [],\r\n\t\t\"stateMutability\": \"nonpayable\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"bytes\",\r\n\t\t\t\t\"name\": \"_data\",\r\n\t\t\t\t\"type\": \"bytes\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"store\",\r\n\t\t\"outputs\": [],\r\n\t\t\"stateMutability\": \"nonpayable\",\r\n\t\t\"type\": \"function\"\r\n\t}\r\n];","import { ADDRESS, ABI } from \"./constants\"\r\nimport Web3 from 'web3'\r\n\r\nexport class Contract {\r\n    #web3; #contract; #account; #provider\r\n    constructor(provider) {\r\n        this.#provider = provider\r\n        this.#web3 = new Web3(this.#provider)\r\n        this.#contract = new this.#web3.eth.Contract(ABI, ADDRESS)\r\n    }\r\n    check_metamask() {\r\n        return (typeof this.#provider !== 'undefined')\r\n    }\r\n    set_account(account) {\r\n        this.#account = account\r\n    }\r\n    async init_metamask() {\r\n        const accounts = await this.#provider.request({ method: 'eth_requestAccounts' })\r\n        if (accounts.length) this.#account = accounts[0]\r\n        return accounts.length > 0\r\n    }\r\n    async save(data) {\r\n        console.log(this.#account)\r\n        return await this.#contract.methods.store(data).send({from: this.#account})\r\n    }\r\n    async fetch() {\r\n        return await this.#contract.methods.data(this.#account).call()\r\n    }\r\n}","export function buf2hex(buffer) { // buffer is an ArrayBuffer\r\n    return '0x' + [...new Uint8Array(buffer)]\r\n        .map(x => x.toString(16).padStart(2, '0'))\r\n        .join('')\r\n  }\r\nexport function hex2buf(hex) {\r\n    return new Uint8Array(hex.match(/[\\da-f]{2}/gi).map(h => parseInt(h, 16))).buffer\r\n}\r\nexport function serialize_form(from_data) {\r\n    return Object.values(Object.fromEntries(from_data)).join(';')\r\n}\r\nexport function serialize_forms(forms) {\r\n    return forms.forEach(form => serialize_form(form)).join('/')\r\n}\r\nexport function deserialize_form(str) {\r\n    return str.split(';')\r\n}\r\nexport function deserialize_forms(str) {\r\n    return str.split('/').forEach(deserialize_form)\r\n}\r\n\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport { Button, ButtonGroup, Card, Form, Tooltip, OverlayTrigger } from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport { Keygen } from './helpers/keygen'\r\nimport { Contract } from \"./helpers/contract\"\r\nimport * as utils from './helpers/utils'\r\n\r\n\r\nfunction Pass({ pass, index, removePass, makeVisible, makeEditable }) {\r\n  const [copyTooltip, setCopyTooltip] = React.useState('copy')\r\n  async function copyPass(e) {\r\n    await navigator.clipboard.writeText(pass.pass)\r\n    setCopyTooltip('copied!')\r\n  }\r\n  return (\r\n    <Form>\r\n      <Form.Group>\r\n        <div className=\"row align-items-end\">\r\n          <div className=\"col\">\r\n            {index == 0 && <Form.Label>Site</Form.Label>}\r\n            <Form.Control disabled={pass.edit} readOnly={pass.edit} defaultValue={pass.site} type=\"text\" className=\"input form-control-plaintext\" onChange={e => pass.site = e.target.value} />\r\n          </div>\r\n          <div className=\"col\">\r\n            {index == 0 && <Form.Label>Login</Form.Label>}\r\n            <Form.Control disabled={pass.edit} readOnly={pass.edit} defaultValue={pass.login} type=\"text\" className=\"input form-control-plaintext\" onChange={e => pass.login = e.target.value} />\r\n          </div>\r\n          <div className=\"col\">\r\n            {index == 0 && <Form.Label>Pass</Form.Label>}\r\n            <Form.Control disabled={pass.edit} readOnly={pass.edit} defaultValue={pass.pass} type={pass.visible ? \"text\" : \"password\"} className=\"input form-control-plaintext\" onChange={e => pass.pass = e.target.value} />\r\n          </div>\r\n          <div className=\"col removeBtn-col\">\r\n            <ButtonGroup>\r\n              <OverlayTrigger\r\n                placement='bottom'\r\n                onExited={() => setCopyTooltip('copy')}\r\n                overlay={\r\n                  <Tooltip>\r\n                    {copyTooltip}\r\n                  </Tooltip>\r\n                }>\r\n                <Button onClick={copyPass}>&#128203;</Button>\r\n              </OverlayTrigger>\r\n              <OverlayTrigger\r\n                placement='bottom'\r\n                overlay={\r\n                  <Tooltip>\r\n                    show\r\n                  </Tooltip>\r\n                }>\r\n                <Button onClick={() => makeVisible(index)}>&#128065;</Button>\r\n              </OverlayTrigger>\r\n              <OverlayTrigger\r\n                placement='bottom'\r\n                overlay={\r\n                  <Tooltip>\r\n                    edit\r\n                  </Tooltip>\r\n                }>\r\n                <Button onClick={() => makeEditable(index)}>&#9997;</Button>\r\n              </OverlayTrigger>\r\n              <OverlayTrigger\r\n                placement='bottom'\r\n                overlay={\r\n                  <Tooltip>\r\n                    delete\r\n                  </Tooltip>\r\n                }>\r\n                <Button onClick={() => removePass(index)}>&#10060;</Button>\r\n              </OverlayTrigger>\r\n            </ButtonGroup>\r\n          </div>\r\n        </div>\r\n      </Form.Group>\r\n    </Form>\r\n  );\r\n\r\n}\r\n\r\nfunction FormKey({ keygen, fetch_blockckain }) {\r\n  const [value, setValue] = React.useState(\"\")\r\n  const [changed, setCHange] = React.useState(false)\r\n\r\n  async function import_key_from_storage() {\r\n    const v = window.localStorage.getItem('ak')\r\n    if (!v) return\r\n    let res = await keygen.import(utils.hex2buf(v))\r\n    if (res) {\r\n      setValue(v)\r\n      console.log('key_fetch')\r\n      await fetch_blockckain()\r\n    }\r\n    return res\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    console.log('key_use_effect')\r\n    import_key_from_storage()\r\n  }, [] /* [keygen, fetch_blockckain] */)\r\n  \r\n\r\n\r\n  const onChange = e => {\r\n    setValue(e.target.value)\r\n    setCHange(true)\r\n  }\r\n\r\n  const onSubmit = async e => {\r\n    e.preventDefault()\r\n    const name = e.nativeEvent.submitter.name\r\n\r\n    if (name == 'generate-key') {\r\n      if (!value || window.confirm('Existing data will be lost! If you dont know key, you will not be able to restore data from blockchain')) {\r\n        await keygen.generate()\r\n        let hex_key = utils.buf2hex(await keygen.export())\r\n        setValue(hex_key)\r\n        setCHange(false)\r\n        window.localStorage.setItem('ak', hex_key)\r\n      }\r\n    }\r\n    else if (name == 'import-key') {\r\n      if (!value) {\r\n        window.alert('Type aes 256 bit key in hex!')\r\n      }\r\n      else {\r\n        let res = await keygen.import(utils.hex2buf(value))\r\n        if (!res) window.alert('Input is invalid!')\r\n        else window.localStorage.setItem('ak', value)\r\n        setCHange(false)\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Form onSubmit={onSubmit}>\r\n      <Form.Group>\r\n        <Form.Label><b>AES KEY</b></Form.Label>\r\n        <Form.Control name='aes' type=\"text\" className=\"input\" value={value} onChange={onChange} placeholder=\"type hex key or press generate\" />\r\n      </Form.Group>\r\n      <br />\r\n      <div className=\"d-flex justify-content-center\">\r\n        <Button name='generate-key' variant=\"primary mb-3\" type=\"submit\">\r\n          Generate Key\r\n        </Button>&nbsp;\r\n        <Button disabled={!(!!value * changed)} name='import-key' variant=\"primary mb-3\" type=\"submit\">\r\n          Import Key\r\n        </Button>\r\n      </div>\r\n    </Form>\r\n  )\r\n}\r\n\r\nfunction LoadingButton(props) {\r\n  const [isLoading, setLoading] = React.useState(false);\r\n\r\n  const handleClick = async e => {\r\n    setLoading(true)\r\n    await props.onClick()\r\n    setLoading(false)\r\n  }\r\n\r\n  return (\r\n    <Button\r\n      variant=\"primary mb-3\"\r\n      disabled={isLoading}\r\n      onClick={!isLoading ? handleClick : null}\r\n    >\r\n      {isLoading ? 'Loading…' : props.title}\r\n    </Button>\r\n  );\r\n}\r\n\r\nfunction FormAction({ addPass, fetch_blockckain, save_blockckain }) {\r\n  return (\r\n    <Form>\r\n      <Button name='add' variant=\"primary mb-3\" onClick={addPass}>\r\n        Add Pass\r\n      </Button>&nbsp;\r\n      <LoadingButton name='save' variant=\"primary mb-3\" onClick={save_blockckain} title=\"Save to Blockchain\" />\r\n      &nbsp;\r\n      <LoadingButton title='Fetch Blockchain' name='fetch' variant=\"primary mb-3\" onClick={fetch_blockckain} />\r\n    </Form>\r\n  )\r\n}\r\n\r\nconst keygen = new Keygen\r\nconst contract = new Contract(window.ethereum)\r\n\r\nfunction App() {\r\n  const [passes, setPasses] = React.useState([]);\r\n  const [view, setView] = React.useState('loader')\r\n\r\n  async function init() {\r\n    const ok = await contract.init_metamask()\r\n    if (!ok) setView('metamask')\r\n    else if (window.ethereum.chainId != 4) setView('testnet')\r\n    else setView('ok')\r\n  }\r\n\r\n  React.useEffect(() => {  \r\n    //Данные действия исполняются только один раз\r\n    if (window.ethereum === undefined) {\r\n      // Проверяем, установлен ли у пользователя метамаск\r\n      setView('no_metamask')\r\n    } else {\r\n      // Подключаем метамаск на сайт, запрашивая аккаунты\r\n      init()\r\n\r\n     /* window.ethereum.on('connect', data => {\r\n        init()\r\n      }) */\r\n\r\n      // Если метамаск установлен, то расставляем на него коллбеки\r\n      window.ethereum.on('accountsChanged', accounts => {\r\n        // Коллбек на смену аккаунтов. Если доступных аккаунтов нет, \r\n        // значит метамаск был деактивирован\r\n        if (accounts.length > 0) {\r\n          setView('ok')\r\n          contract.set_account(accounts[0])\r\n          fetch_blockckain()\r\n        }\r\n        else setView('metamask')\r\n      })\r\n      window.ethereum.on('chainChanged', chainId => {\r\n        // Коллбек на смену сети. Работаем только в Rinkeby (номер 4)\r\n        if (chainId == 4) setView('ok')\r\n        else setView('testnet')\r\n      })\r\n    }\r\n  }, [contract])\r\n\r\n\r\n\r\n  const sep1 = ';;;'\r\n  const sep2 = '|||'\r\n  const serialize = p => p.site + sep1 + p.login + sep1 + p.pass\r\n\r\n  async function save_blockckain() {\r\n    if (!keygen.is_valid()) return\r\n    \r\n    const newPasses = [...passes]\r\n    newPasses.map(p => p.edit = true)\r\n    setPasses(newPasses);\r\n\r\n    let s = passes.map(serialize).join(sep2)\r\n    let crypted = await keygen.encryptMessage(s)\r\n    let res = await contract.save(utils.buf2hex(crypted))\r\n  }\r\n\r\n  async function fetch_blockckain() {\r\n    if (!keygen.is_valid()) return\r\n    setPasses([])\r\n    let data = await contract.fetch()\r\n    if (!data) return alert('blockchain data is empty!')\r\n\r\n    let open = await keygen.decryptMessage(utils.hex2buf(data))\r\n\r\n    const fields = ['site', 'login', 'pass']\r\n    const newPasses = open.split(sep2).map(ps => {\r\n      let ob = { edit: true, visible: false }\r\n      ps.split(sep1).forEach((f, i) => ob[fields[i]] = f)\r\n      return ob\r\n    })\r\n\r\n    setPasses(newPasses)\r\n  }\r\n\r\n  async function fetch_blockckain_btn() {\r\n    if (!keygen.is_valid()) alert('Key is invalid! Please, paste correct 256 bit key in hex, or press btn to Generate the new one')\r\n    else await fetch_blockckain()\r\n  }\r\n\r\n  async function save_blockckain_btn() {\r\n    if (!keygen.is_valid()) alert('Key is invalid! Please, paste correct 256 bit key in hex, or press btn to Generate the new one')\r\n    else await save_blockckain()\r\n  }\r\n\r\n  const addPass = _ => {\r\n    const newPasses = [...passes, {}];\r\n    setPasses(newPasses);\r\n  };\r\n\r\n  const removePass = index => {\r\n    const newPasses = [...passes];\r\n    newPasses.splice(index, 1);\r\n    setPasses(newPasses);\r\n  }\r\n\r\n  const makeVisible = index => {\r\n    const newPasses = [...passes];\r\n    newPasses[index].visible = !newPasses[index].visible\r\n    setPasses(newPasses);\r\n  }\r\n\r\n  const makeEditable = index => {\r\n    const newPasses = [...passes];\r\n    newPasses[index].edit = !newPasses[index].edit\r\n    setPasses(newPasses);\r\n  }\r\n\r\n  const no_metamask = (\r\n    <h1 className=\"text-center mb-4\">Please, install metamask plugin</h1>\r\n  );\r\n\r\n  const activate_metamask = (\r\n    <Form>\r\n      <h1 className=\"text-center mb-4\">Please, activate metamask plugin</h1>\r\n      {/* <Button name='meta' variant=\"primary mb-3\" onClick={contract.init_metamask}>\r\n      Activate Metamask\r\n    </Button>&nbsp; */}\r\n    </Form>\r\n  );\r\n\r\n  const testnet = (\r\n    <h1 className=\"text-center mb-4\">Please, use Rinkeby testnet</h1>\r\n  );\r\n\r\n  const bigSpinnerStyle = {\r\n    width: 5 + 'rem',\r\n    height: 5 + 'rem'\r\n  }\r\n  const coverStyle = {\r\n    minHeight: 80 + 'vh'\r\n  }\r\n  const loader = (\r\n    <div className=\"d-flex justify-content-center align-items-center\" style={coverStyle}>\r\n      <div className=\"spinner-grow text-primary\" role=\"status\" style={bigSpinnerStyle}>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  const main_form = (\r\n    <div>\r\n      <h1 className=\"text-center mb-4\">Password manager</h1>\r\n      <FormKey addPass={addPass} keygen={keygen} fetch_blockckain={fetch_blockckain} />\r\n      <div className=\"pass-list\">\r\n\r\n\r\n        {passes.map((pass, index) => (\r\n          <Card className=\"pass\">\r\n            <Card.Body>\r\n              <Pass\r\n                key={index}\r\n                index={index}\r\n                pass={pass}\r\n                removePass={removePass}\r\n                makeVisible={makeVisible}\r\n                makeEditable={makeEditable}\r\n              />\r\n            </Card.Body>\r\n          </Card>\r\n        ))}\r\n      </div>\r\n      <br />\r\n      <FormAction addPass={addPass} keygen={keygen} fetch_blockckain={fetch_blockckain_btn} save_blockckain={save_blockckain_btn} />\r\n    </div>\r\n  );\r\n\r\n  let rdr = main_form\r\n  switch (view) {\r\n    case 'no_metamask': rdr = no_metamask; break\r\n    case 'metamask': rdr = activate_metamask; break\r\n    case 'testnet': rdr = testnet; break\r\n    case 'ok': rdr = main_form; break\r\n    case 'loader': rdr = loader; break\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <div className=\"container\">\r\n        <br />\r\n        {rdr}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}